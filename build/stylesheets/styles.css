@charset "UTF-8";
/* ===============================================================================

    This brand identity and website was made by Patternworks for ellisjones.com.au
    in December 2015. Check out http:\\pattern.works to learn more.

   @mixin ============================================================================== */
/**
 * Import libraries
 */
/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/**
 * A thin layer on top of normalize.css that provides a starting point more
 * suitable for web applications. Removes the default spacing and border for
 * appropriate elements.
 */
html {
  background: inherit;
  color: inherit;
  font: 16px sans-serif; }

a {
  color: #069;
  text-decoration: none; }

a:hover,
a:focus,
a:active {
  color: #069;
  text-decoration: underline; }

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
figure,
p,
pre {
  margin: 0; }

button {
  background: transparent;
  border: 0;
  padding: 0; }

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */
button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color; }

fieldset {
  border: 0;
  margin: 0;
  padding: 0; }

iframe {
  border: 0; }

ol,
ul {
  list-style: none;
  margin: 0;
  padding: 0; }

/**
 * Suppress the focus outline on links that cannot be accessed via keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 */
[tabindex="-1"]:focus {
  outline: none !important; }

/**
 * Vertical alignment utilities
 * Depends on an appropriate `display` value.
 */
.u-alignBaseline {
  vertical-align: baseline !important; }

.u-alignBottom {
  vertical-align: bottom !important; }

.u-alignMiddle {
  vertical-align: middle !important; }

.u-alignTop {
  vertical-align: top !important; }

/**
 * Display-type utilities
 */
.u-block {
  display: block !important; }

.u-hidden {
  display: none !important; }

/**
 * Completely remove from the flow but leave available to screen readers.
 */
.u-hiddenVisually {
  position: absolute !important;
  overflow: hidden !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important; }

.u-inline {
  display: inline !important; }

/**
 * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
 * inline-block will display at its default size, and not limit its width to
 * 100% of an ancestral container.
 */
.u-inlineBlock {
  display: inline-block !important;
  max-width: 100%;
  /* 1 */ }

.u-table {
  display: table !important; }

.u-tableCell {
  display: table-cell !important; }

.u-tableRow {
  display: table-row !important; }

/**
 * Contain floats
 *
 * Make an element expand to contain floated children.
 * Uses pseudo-elements (micro clearfix).
 *
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of the
 *    element.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
.u-cf:before,
.u-cf:after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */ }

.u-cf:after {
  clear: both; }

/**
 * New block formatting context
 *
 * This affords some useful properties to the element. It won't wrap under
 * floats. Will also contain any floated children.

 * N.B. This will clip overflow. Use the alternative method below if this is
 * problematic.
 */
.u-nbfc {
  overflow: hidden !important; }

/**
 * New block formatting context (alternative)
 *
 * Alternative method when overflow must not be clipped.
 *
 * 1. Create a new block formatting context (NBFC).
 * 2. Avoid shrink-wrap behaviour of table-cell.
 *
 * N.B. This breaks down in some browsers when elements within this element
 * exceed its width.
 */
.u-nbfcAlt {
  display: table-cell !important;
  /* 1 */
  width: 10000px !important;
  /* 2 */ }

/**
 * Floats
 */
.u-floatLeft {
  float: left !important; }

.u-floatRight {
  float: right !important; }

/**
 * Clean link
 *
 * A link without any text-decoration at all.
 */
.u-linkClean,
.u-linkClean:hover,
.u-linkClean:focus,
.u-linkClean:active {
  text-decoration: none !important; }

/**
 * Link complex
 *
 * A common pattern is to have a link with several pieces of text and/or an
 * icon, where only one piece of text should display the underline when the
 * link is the subject of user interaction.
 *
 * Example HTML:
 *
 * <a class="u-linkComplex" href="#">
 *   Link complex
 *   <span class="u-linkComplexTarget">target</span>
 * </a>
 */
.u-linkComplex,
.u-linkComplex:hover,
.u-linkComplex:focus,
.u-linkComplex:active {
  text-decoration: none !important; }

.u-linkComplex:hover .u-linkComplexTarget,
.u-linkComplex:focus .u-linkComplexTarget,
.u-linkComplex:active .u-linkComplexTarget {
  text-decoration: underline !important; }

/**
 * Block-level link
 *
 * Combination of traits commonly used in vertical navigation lists.
 */
.u-linkBlock,
.u-linkBlock:hover,
.u-linkBlock:focus,
.u-linkBlock:active {
  display: block !important;
  text-decoration: none !important; }

/**
 * Specify the proportional offset after an element.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 4, 5, 6, 8, 10, 12 section
 */
.u-after1of12 {
  margin-right: 8.333333333333332% !important; }

.u-after1of10 {
  margin-right: 10% !important; }

.u-after1of8 {
  margin-right: 12.5% !important; }

.u-after1of6,
.u-after2of12 {
  margin-right: 16.666666666666664% !important; }

.u-after1of5,
.u-after2of10 {
  margin-right: 20% !important; }

.u-after1of4,
.u-after2of8,
.u-after3of12 {
  margin-right: 25% !important; }

.u-after3of10 {
  margin-right: 30% !important; }

.u-after1of3,
.u-after2of6,
.u-after4of12 {
  margin-right: 33.33333333333333% !important; }

.u-after3of8 {
  margin-right: 37.5% !important; }

.u-after2of5,
.u-after4of10 {
  margin-right: 40% !important; }

.u-after5of12 {
  margin-right: 41.66666666666667% !important; }

.u-after1of2,
.u-after2of4,
.u-after3of6,
.u-after4of8,
.u-after5of10,
.u-after6of12 {
  margin-right: 50% !important; }

.u-after7of12 {
  margin-right: 58.333333333333336% !important; }

.u-after3of5,
.u-after6of10 {
  margin-right: 60% !important; }

.u-after5of8 {
  margin-right: 62.5% !important; }

.u-after2of3,
.u-after4of6,
.u-after8of12 {
  margin-right: 66.66666666666666% !important; }

.u-after7of10 {
  margin-right: 70% !important; }

.u-after3of4,
.u-after6of8,
.u-after9of12 {
  margin-right: 75% !important; }

.u-after4of5,
.u-after8of10 {
  margin-right: 80% !important; }

.u-after5of6,
.u-after10of12 {
  margin-right: 83.33333333333334% !important; }

.u-after7of8 {
  margin-right: 87.5% !important; }

.u-after9of10 {
  margin-right: 90% !important; }

.u-after11of12 {
  margin-right: 91.66666666666666% !important; }

/**
 * Specify the proportional offset before an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 section
 */
.u-before1of12 {
  margin-left: 8.333333333333332% !important; }

.u-before1of10 {
  margin-left: 10% !important; }

.u-before1of8 {
  margin-left: 12.5% !important; }

.u-before1of6,
.u-before2of12 {
  margin-left: 16.666666666666664% !important; }

.u-before1of5,
.u-before2of10 {
  margin-left: 20% !important; }

.u-before1of4,
.u-before2of8,
.u-before3of12 {
  margin-left: 25% !important; }

.u-before3of10 {
  margin-left: 30% !important; }

.u-before1of3,
.u-before2of6,
.u-before4of12 {
  margin-left: 33.33333333333333% !important; }

.u-before3of8 {
  margin-left: 37.5% !important; }

.u-before2of5,
.u-before4of10 {
  margin-left: 40% !important; }

.u-before5of12 {
  margin-left: 41.66666666666667% !important; }

.u-before1of2,
.u-before2of4,
.u-before3of6,
.u-before4of8,
.u-before5of10,
.u-before6of12 {
  margin-left: 50% !important; }

.u-before7of12 {
  margin-left: 58.333333333333336% !important; }

.u-before3of5,
.u-before6of10 {
  margin-left: 60% !important; }

.u-before5of8 {
  margin-left: 62.5% !important; }

.u-before2of3,
.u-before4of6,
.u-before8of12 {
  margin-left: 66.66666666666666% !important; }

.u-before7of10 {
  margin-left: 70% !important; }

.u-before3of4,
.u-before6of8,
.u-before9of12 {
  margin-left: 75% !important; }

.u-before4of5,
.u-before8of10 {
  margin-left: 80% !important; }

.u-before5of6,
.u-before10of12 {
  margin-left: 83.33333333333334% !important; }

.u-before7of8 {
  margin-left: 87.5% !important; }

.u-before9of10 {
  margin-left: 90% !important; }

.u-before11of12 {
  margin-left: 91.66666666666666% !important; }

.u-posAbsolute {
  position: absolute !important; }

/**
 * Pins to all corners by default. But when a width and/or height are
 * provided, the element will be centered in its nearest relatively-positioned
 * ancestor.
 */
.u-posAbsoluteCenter {
  bottom: 0 !important;
  left: 0 !important;
  margin: auto !important;
  position: absolute !important;
  right: 0 !important;
  top: 0 !important; }

/**
 * 1. Make sure fixed elements are promoted into a new layer, for performance
 *    reasons.
 */
.u-posFixed {
  position: fixed !important;
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  /* 1 */ }

.u-posRelative {
  position: relative !important; }

.u-posStatic {
  position: static !important; }

/**
 * Sizing utilities
 */
/* Intrinsic widths
   ========================================================================== */
/**
 * Make an element shrink wrap its content.
 */
.u-sizeFit,
.u-sizeFitAlt {
  display: block !important;
  float: left !important;
  width: auto !important; }

.u-sizeFitAlt {
  float: right !important; }

/**
 * Make an element fill the remaining space.
 * N.B. This will hide overflow.
 */
.u-sizeFill {
  display: block !important;
  overflow: hidden !important;
  width: auto !important; }

/**
 * An alternative method to make an element fill the remaining space.
 * N.B. Do not use if child elements might be wider than the remaining space.
 * In Chrome, Safari, and Firefox it results in undesired layout.
 */
.u-sizeFillAlt {
  display: table-cell !important;
  max-width: 100% !important;
  width: 10000px !important; }

/**
 * Make an element the width of its parent.
 */
.u-sizeFull {
  box-sizing: border-box !important;
  display: block !important;
  width: 100% !important; }

/* Proportional widths
   ========================================================================== */
/**
 * Specify the proportional width of an object.
 * Intentional redundancy build into each set of unit classes.
 * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
 */
.u-size1of12 {
  width: 8.333333333333332% !important; }

.u-size1of10 {
  width: 10% !important; }

.u-size1of8 {
  width: 12.5% !important; }

.u-size1of6,
.u-size2of12 {
  width: 16.666666666666664% !important; }

.u-size1of5,
.u-size2of10 {
  width: 20% !important; }

.u-size1of4,
.u-size2of8,
.u-size3of12 {
  width: 25% !important; }

.u-size3of10 {
  width: 30% !important; }

.u-size1of3,
.u-size2of6,
.u-size4of12 {
  width: 33.33333333333333% !important; }

.u-size3of8 {
  width: 37.5% !important; }

.u-size2of5,
.u-size4of10 {
  width: 40% !important; }

.u-size5of12 {
  width: 41.66666666666667% !important; }

.u-size1of2,
.u-size2of4,
.u-size3of6,
.u-size4of8,
.u-size5of10,
.u-size6of12 {
  width: 50% !important; }

.u-size7of12 {
  width: 58.333333333333336% !important; }

.u-size3of5,
.u-size6of10 {
  width: 60% !important; }

.u-size5of8 {
  width: 62.5% !important; }

.u-size2of3,
.u-size4of6,
.u-size8of12 {
  width: 66.66666666666666% !important; }

.u-size7of10 {
  width: 70% !important; }

.u-size3of4,
.u-size6of8,
.u-size9of12 {
  width: 75% !important; }

.u-size4of5,
.u-size8of10 {
  width: 80% !important; }

.u-size5of6,
.u-size10of12 {
  width: 83.33333333333334% !important; }

.u-size7of8 {
  width: 87.5% !important; }

.u-size9of10 {
  width: 90% !important; }

.u-size11of12 {
  width: 91.66666666666666% !important; }

/**
 * Size: breakpoint A1 (extra-small)
 */
@media (min-width: 600px) {
  /**
   * Make an element shrink wrap its content.
   */
  .u-xs-sizeFit,
  .u-xs-sizeFitAlt {
    display: block !important;
    float: left !important;
    width: auto !important; }
  .u-xs-sizeFitAlt {
    float: right !important; }
  /**
   * Make an element fill the remaining space.
   * N.B. This will hide overflow.
   */
  .u-xs-sizeFill {
    display: block !important;
    overflow: hidden !important;
    width: auto !important; }
  /**
   * An alternative method to make an element fill the remaining space.
   * N.B. Do not use if child elements might be wider than the remaining space.
   * In Chrome, Safari, and Firefox it results in undesired layout.
   */
  .u-xs-sizeFillAlt {
    display: table-cell !important;
    max-width: 100% !important;
    width: 10000px !important; }
  /**
   * Make an element the width of its parent.
   */
  .u-xs-sizeFull {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; }
  .u-xs-before1of12 {
    margin-left: 8.333333333333332% !important; }
  .u-xs-before1of10 {
    margin-left: 10% !important; }
  .u-xs-before1of8 {
    margin-left: 12.5% !important; }
  .u-xs-before1of6,
  .u-xs-before2of12 {
    margin-left: 16.666666666666664% !important; }
  .u-xs-before1of5,
  .u-xs-before2of10 {
    margin-left: 20% !important; }
  .u-xs-before1of4,
  .u-xs-before2of8,
  .u-xs-before3of12 {
    margin-left: 25% !important; }
  .u-xs-before3of10 {
    margin-left: 30% !important; }
  .u-xs-before1of3,
  .u-xs-before2of6,
  .u-xs-before4of12 {
    margin-left: 33.33333333333333% !important; }
  .u-xs-before3of8 {
    margin-left: 37.5% !important; }
  .u-xs-before2of5,
  .u-xs-before4of10 {
    margin-left: 40% !important; }
  .u-xs-before5of12 {
    margin-left: 41.66666666666667% !important; }
  .u-xs-before1of2,
  .u-xs-before2of4,
  .u-xs-before3of6,
  .u-xs-before4of8,
  .u-xs-before5of10,
  .u-xs-before6of12 {
    margin-left: 50% !important; }
  .u-xs-before7of12 {
    margin-left: 58.333333333333336% !important; }
  .u-xs-before3of5,
  .u-xs-before6of10 {
    margin-left: 60% !important; }
  .u-xs-before5of8 {
    margin-left: 62.5% !important; }
  .u-xs-before2of3,
  .u-xs-before4of6,
  .u-xs-before8of12 {
    margin-left: 66.66666666666666% !important; }
  .u-xs-before7of10 {
    margin-left: 70% !important; }
  .u-xs-before3of4,
  .u-xs-before6of8,
  .u-xs-before9of12 {
    margin-left: 75% !important; }
  .u-xs-before4of5,
  .u-xs-before8of10 {
    margin-left: 80% !important; }
  .u-xs-before5of6,
  .u-xs-before10of12 {
    margin-left: 83.33333333333334% !important; }
  .u-xs-before7of8 {
    margin-left: 87.5% !important; }
  .u-xs-before9of10 {
    margin-left: 90% !important; }
  .u-xs-before11of12 {
    margin-left: 91.66666666666666% !important; }
  /* Proportional widths: breakpoint 1 (x-small)
     ========================================================================== */
  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   */
  .u-xs-size1of12 {
    width: 8.333333333333332% !important; }
  .u-xs-size1of10 {
    width: 10% !important; }
  .u-xs-size1of8 {
    width: 12.5% !important; }
  .u-xs-size1of6,
  .u-xs-size2of12 {
    width: 16.666666666666664% !important; }
  .u-xs-size1of5,
  .u-xs-size2of10 {
    width: 20% !important; }
  .u-xs-size1of4,
  .u-xs-size2of8,
  .u-xs-size3of12 {
    width: 25% !important; }
  .u-xs-size3of10 {
    width: 30% !important; }
  .u-xs-size1of3,
  .u-xs-size2of6,
  .u-xs-size4of12 {
    width: 33.33333333333333% !important; }
  .u-xs-size3of8 {
    width: 37.5% !important; }
  .u-xs-size2of5,
  .u-xs-size4of10 {
    width: 40% !important; }
  .u-xs-size5of12 {
    width: 41.66666666666667% !important; }
  .u-xs-size1of2,
  .u-xs-size2of4,
  .u-xs-size3of6,
  .u-xs-size4of8,
  .u-xs-size5of10,
  .u-xs-size6of12 {
    width: 50% !important; }
  .u-xs-size7of12 {
    width: 58.333333333333336% !important; }
  .u-xs-size3of5,
  .u-xs-size6of10 {
    width: 60% !important; }
  .u-xs-size5of8 {
    width: 62.5% !important; }
  .u-xs-size2of3,
  .u-xs-size4of6,
  .u-xs-size8of12 {
    width: 66.66666666666666% !important; }
  .u-xs-size7of10 {
    width: 70% !important; }
  .u-xs-size3of4,
  .u-xs-size6of8,
  .u-xs-size9of12 {
    width: 75% !important; }
  .u-xs-size4of5,
  .u-xs-size8of10 {
    width: 80% !important; }
  .u-xs-size5of6,
  .u-xs-size10of12 {
    width: 83.33333333333334% !important; }
  .u-xs-size7of8 {
    width: 87.5% !important; }
  .u-xs-size9of10 {
    width: 90% !important; }
  .u-xs-size11of12 {
    width: 91.66666666666666% !important; } }

/**
 * Size: breakpoint 1 (small)
 */
@media (min-width: 600px) {
  /**
   * Make an element shrink wrap its content.
   */
  .u-sm-sizeFit,
  .u-sm-sizeFitAlt {
    display: block !important;
    float: left !important;
    width: auto !important; }
  .u-sm-sizeFitAlt {
    float: right !important; }
  /**
   * Make an element fill the remaining space.
   * N.B. This will hide overflow.
   */
  .u-sm-sizeFill {
    display: block !important;
    overflow: hidden !important;
    width: auto !important; }
  /**
   * An alternative method to make an element fill the remaining space.
   * N.B. Do not use if child elements might be wider than the remaining space.
   * In Chrome, Safari, and Firefox it results in undesired layout.
   */
  .u-sm-sizeFillAlt {
    display: table-cell !important;
    max-width: 100% !important;
    width: 10000px !important; }
  /**
   * Make an element the width of its parent.
   */
  .u-sm-sizeFull {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; }
  .u-sm-before1of12 {
    margin-left: 8.333333333333332% !important; }
  .u-sm-before1of10 {
    margin-left: 10% !important; }
  .u-sm-before1of8 {
    margin-left: 12.5% !important; }
  .u-sm-before1of6,
  .u-sm-before2of12 {
    margin-left: 16.666666666666664% !important; }
  .u-sm-before1of5,
  .u-sm-before2of10 {
    margin-left: 20% !important; }
  .u-sm-before1of4,
  .u-sm-before2of8,
  .u-sm-before3of12 {
    margin-left: 25% !important; }
  .u-sm-before3of10 {
    margin-left: 30% !important; }
  .u-sm-before1of3,
  .u-sm-before2of6,
  .u-sm-before4of12 {
    margin-left: 33.33333333333333% !important; }
  .u-sm-before3of8 {
    margin-left: 37.5% !important; }
  .u-sm-before2of5,
  .u-sm-before4of10 {
    margin-left: 40% !important; }
  .u-sm-before5of12 {
    margin-left: 41.66666666666667% !important; }
  .u-sm-before1of2,
  .u-sm-before2of4,
  .u-sm-before3of6,
  .u-sm-before4of8,
  .u-sm-before5of10,
  .u-sm-before6of12 {
    margin-left: 50% !important; }
  .u-sm-before7of12 {
    margin-left: 58.333333333333336% !important; }
  .u-sm-before3of5,
  .u-sm-before6of10 {
    margin-left: 60% !important; }
  .u-sm-before5of8 {
    margin-left: 62.5% !important; }
  .u-sm-before2of3,
  .u-sm-before4of6,
  .u-sm-before8of12 {
    margin-left: 66.66666666666666% !important; }
  .u-sm-before7of10 {
    margin-left: 70% !important; }
  .u-sm-before3of4,
  .u-sm-before6of8,
  .u-sm-before9of12 {
    margin-left: 75% !important; }
  .u-sm-before4of5,
  .u-sm-before8of10 {
    margin-left: 80% !important; }
  .u-sm-before5of6,
  .u-sm-before10of12 {
    margin-left: 83.33333333333334% !important; }
  .u-sm-before7of8 {
    margin-left: 87.5% !important; }
  .u-sm-before9of10 {
    margin-left: 90% !important; }
  .u-sm-before11of12 {
    margin-left: 91.66666666666666% !important; }
  /* Proportional widths: breakpoint 1 (small)
     ========================================================================== */
  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   */
  .u-sm-size1of12 {
    width: 8.333333333333332% !important; }
  .u-sm-size1of10 {
    width: 10% !important; }
  .u-sm-size1of8 {
    width: 12.5% !important; }
  .u-sm-size1of6,
  .u-sm-size2of12 {
    width: 16.666666666666664% !important; }
  .u-sm-size1of5,
  .u-sm-size2of10 {
    width: 20% !important; }
  .u-sm-size1of4,
  .u-sm-size2of8,
  .u-sm-size3of12 {
    width: 25% !important; }
  .u-sm-size3of10 {
    width: 30% !important; }
  .u-sm-size1of3,
  .u-sm-size2of6,
  .u-sm-size4of12 {
    width: 33.33333333333333% !important; }
  .u-sm-size3of8 {
    width: 37.5% !important; }
  .u-sm-size2of5,
  .u-sm-size4of10 {
    width: 40% !important; }
  .u-sm-size5of12 {
    width: 41.66666666666667% !important; }
  .u-sm-size1of2,
  .u-sm-size2of4,
  .u-sm-size3of6,
  .u-sm-size4of8,
  .u-sm-size5of10,
  .u-sm-size6of12 {
    width: 50% !important; }
  .u-sm-size7of12 {
    width: 58.333333333333336% !important; }
  .u-sm-size3of5,
  .u-sm-size6of10 {
    width: 60% !important; }
  .u-sm-size5of8 {
    width: 62.5% !important; }
  .u-sm-size2of3,
  .u-sm-size4of6,
  .u-sm-size8of12 {
    width: 66.66666666666666% !important; }
  .u-sm-size7of10 {
    width: 70% !important; }
  .u-sm-size3of4,
  .u-sm-size6of8,
  .u-sm-size9of12 {
    width: 75% !important; }
  .u-sm-size4of5,
  .u-sm-size8of10 {
    width: 80% !important; }
  .u-sm-size5of6,
  .u-sm-size10of12 {
    width: 83.33333333333334% !important; }
  .u-sm-size7of8 {
    width: 87.5% !important; }
  .u-sm-size9of10 {
    width: 90% !important; }
  .u-sm-size11of12 {
    width: 91.66666666666666% !important; } }

/**
 * Size: breakpoint 2 (medium)
 */
@media (min-width: 992px) {
  /**
   * Make an element shrink wrap its content.
   */
  .u-md-sizeFit,
  .u-md-sizeFitAlt {
    display: block !important;
    float: left !important;
    width: auto !important; }
  .u-md-sizeFitAlt {
    float: right !important; }
  /**
   * Make an element fill the remaining space.
   * N.B. This will hide overflow.
   */
  .u-md-sizeFill {
    display: block !important;
    overflow: hidden !important;
    width: auto !important; }
  /**
   * An alternative method to make an element fill the remaining space.
   * N.B. Do not use if child elements might be wider than the remaining space.
   * In Chrome, Safari, and Firefox it results in undesired layout.
   */
  .u-md-sizeFillAlt {
    display: table-cell !important;
    max-width: 100% !important;
    width: 10000px !important; }
  /**
   * Make an element the width of its parent.
   */
  .u-md-sizeFull {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; }
  /* Proportional widths: breakpoint 2 (medium)
     ========================================================================== */
  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   */
  .u-md-size1of12 {
    width: 8.333333333333332% !important; }
  .u-md-size1of10 {
    width: 10% !important; }
  .u-md-size1of8 {
    width: 12.5% !important; }
  .u-md-size1of6,
  .u-md-size2of12 {
    width: 16.666666666666664% !important; }
  .u-md-size1of5,
  .u-md-size2of10 {
    width: 20% !important; }
  .u-md-size1of4,
  .u-md-size2of8,
  .u-md-size3of12 {
    width: 25% !important; }
  .u-md-size3of10 {
    width: 30% !important; }
  .u-md-size1of3,
  .u-md-size2of6,
  .u-md-size4of12 {
    width: 33.33333333333333% !important; }
  .u-md-size3of8 {
    width: 37.5% !important; }
  .u-md-size2of5,
  .u-md-size4of10 {
    width: 40% !important; }
  .u-md-size5of12 {
    width: 41.66666666666667% !important; }
  .u-md-size1of2,
  .u-md-size2of4,
  .u-md-size3of6,
  .u-md-size4of8,
  .u-md-size5of10,
  .u-md-size6of12 {
    width: 50% !important; }
  .u-md-size7of12 {
    width: 58.333333333333336% !important; }
  .u-md-size3of5,
  .u-md-size6of10 {
    width: 60% !important; }
  .u-md-size5of8 {
    width: 62.5% !important; }
  .u-md-size2of3,
  .u-md-size4of6,
  .u-md-size8of12 {
    width: 66.66666666666666% !important; }
  .u-md-size7of10 {
    width: 70% !important; }
  .u-md-size3of4,
  .u-md-size6of8,
  .u-md-size9of12 {
    width: 75% !important; }
  .u-md-size4of5,
  .u-md-size8of10 {
    width: 80% !important; }
  .u-md-size5of6,
  .u-md-size10of12 {
    width: 83.33333333333334% !important; }
  .u-md-size7of8 {
    width: 87.5% !important; }
  .u-md-size9of10 {
    width: 90% !important; }
  .u-md-size11of12 {
    width: 91.66666666666666% !important; } }

/**
 * Size: breakpoint 3 (large)
 */
@media (min-width: 960px) {
  /**
   * Make an element shrink wrap its content.
   */
  .u-lg-sizeFit,
  .u-lg-sizeFitAlt {
    display: block !important;
    float: left !important;
    width: auto !important; }
  .u-lg-sizeFitAlt {
    float: right !important; }
  /**
   * Make an element fill the remaining space.
   * N.B. This will hide overflow.
   */
  .u-lg-sizeFill {
    display: block !important;
    overflow: hidden !important;
    width: auto !important; }
  /**
   * An alternative method to make an element fill the remaining space.
   * N.B. Do not use if child elements might be wider than the remaining space.
   * In Chrome, Safari, and Firefox it results in undesired layout.
   */
  .u-lg-sizeFillAlt {
    display: table-cell !important;
    max-width: 100% !important;
    width: 10000px !important; }
  /**
   * Make an element the width of its parent.
   */
  .u-lg-sizeFull {
    box-sizing: border-box !important;
    display: block !important;
    width: 100% !important; }
  /* Proportional widths: breakpoint 3 (large)
     ========================================================================== */
  /**
   * Specify the proportional width of an object.
   * Intentional redundancy build into each set of unit classes.
   * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
   */
  .u-lg-size1of12 {
    width: 8.333333333333332% !important; }
  .u-lg-size1of10 {
    width: 10% !important; }
  .u-lg-size1of8 {
    width: 12.5% !important; }
  .u-lg-size1of6,
  .u-lg-size2of12 {
    width: 16.666666666666664% !important; }
  .u-lg-size1of5,
  .u-lg-size2of10 {
    width: 20% !important; }
  .u-lg-size1of4,
  .u-lg-size2of8,
  .u-lg-size3of12 {
    width: 25% !important; }
  .u-lg-size3of10 {
    width: 30% !important; }
  .u-lg-size1of3,
  .u-lg-size2of6,
  .u-lg-size4of12 {
    width: 33.33333333333333% !important; }
  .u-lg-size3of8 {
    width: 37.5% !important; }
  .u-lg-size2of5,
  .u-lg-size4of10 {
    width: 40% !important; }
  .u-lg-size5of12 {
    width: 41.66666666666667% !important; }
  .u-lg-size1of2,
  .u-lg-size2of4,
  .u-lg-size3of6,
  .u-lg-size4of8,
  .u-lg-size5of10,
  .u-lg-size6of12 {
    width: 50% !important; }
  .u-lg-size7of12 {
    width: 58.333333333333336% !important; }
  .u-lg-size3of5,
  .u-lg-size6of10 {
    width: 60% !important; }
  .u-lg-size5of8 {
    width: 62.5% !important; }
  .u-lg-size2of3,
  .u-lg-size4of6,
  .u-lg-size8of12 {
    width: 66.66666666666666% !important; }
  .u-lg-size7of10 {
    width: 70% !important; }
  .u-lg-size3of4,
  .u-lg-size6of8,
  .u-lg-size9of12 {
    width: 75% !important; }
  .u-lg-size4of5,
  .u-lg-size8of10 {
    width: 80% !important; }
  .u-lg-size5of6,
  .u-lg-size10of12 {
    width: 83.33333333333334% !important; }
  .u-lg-size7of8 {
    width: 87.5% !important; }
  .u-lg-size9of10 {
    width: 90% !important; }
  .u-lg-size11of12 {
    width: 91.66666666666666% !important; } }

/**
 * Word breaking
 *
 * Break strings when their length exceeds the width of their container.
 */
.u-textBreak {
  word-wrap: break-word !important; }

/**
 * Horizontal text alignment
 */
.u-textCenter {
  text-align: center !important; }

.u-textLeft {
  text-align: left !important; }

.u-textRight {
  text-align: right !important; }

/**
 * Inherit the ancestor's text color.
 */
.u-textInheritColor {
  color: inherit !important; }

/**
 * Enables font kerning in all browsers.
 * http://blog.typekit.com/2014/02/05/kerning-on-the-web/
 *
 * 1. Chrome (not Windows), Firefox, Safari 6+, iOS, Android
 * 2. Chrome (not Windows), Firefox, IE 10+
 * 3. Safari 7 and future browsers
 */
.u-textKern {
  text-rendering: optimizeLegibility;
  /* 1 */
  font-feature-settings: "kern" 1;
  /* 2 */
  font-kerning: normal;
  /* 3 */ }

/**
 * Prevent whitespace wrapping
 */
.u-textNoWrap {
  white-space: nowrap !important; }

/**
 * Text truncation
 *
 * Prevent text from wrapping onto multiple lines, and truncate with an
 * ellipsis.
 *
 * 1. Ensure that the node has a maximum width after which truncation can
 *    occur.
 * 2. Fix for IE 8/9 if `word-wrap: break-word` is in effect on ancestor
 *    nodes.
 */
.u-textTruncate {
  max-width: 100%;
  /* 1 */
  overflow: hidden !important;
  text-overflow: ellipsis !important;
  white-space: nowrap !important;
  word-wrap: normal !important;
  /* 2 */ }

/** @define Arrange */
/**
 * This component lets you lay out a row of cells in various ways. You can
 * specify whether a cell should be wide enough to fit its content, or take up
 * the remaining space in the row. It's also possible to give all cells an
 * equal width, and to control their vertical alignment.
 */
/**
 * 1. Protect against the component expanding beyond the confines of its
 *    container if properties affecting the box-model are applied to the
 *    component. Mainly necessary because of (5).
 * 2. Rely on table layout.
 * 3. Zero out the default spacing that might be on an element (e.g., `ul`).
 * 4. Make sure the component fills at least the full width of its parent.
 * 5. Reset the table-layout algorithm in case a component is nested.
 */
.Arrange {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 2 */
  margin: 0;
  /* 3 */
  min-width: 100%;
  /* 4 */
  padding: 0;
  /* 3 */
  table-layout: auto;
  /* 5 */ }

/**
 * There are two possible types of child. `sizeFill` will expand to fill all
 * of the remaining space not filled by `sizeFit` elements.
 *
 * 1. Zero out any default spacing that might be on an element (e.g., `li`);
 *    Margin has no effect when coupled with `display: table-cell`.
 * 2. All cells are top-aligned by default
 */
.Arrange-sizeFill,
.Arrange-sizeFit {
  display: table-cell;
  padding: 0;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/**
 * Make sure the main content block expands to fill the remaining space.
 */
.Arrange-sizeFill {
  width: 100%; }

/**
 * Where possible, protect against large images breaking the layout. Prevent them from
 * exceeding the width of the main content block by making them fluid.
 *
 * Only work for all browsers with the `Arrange--equally` variant. For Firefox
 * and IE to constrain image dimensions for other layouts, large images will
 * need their width set to `100%`.
 */
.Arrange-sizeFill img {
  height: auto;
  max-width: 100%; }

/**
 * Defend against a side-effect of this layout pattern: images in
 * 'Arrange-sizeFit' cannot be fluid, otherwise they lose their ability to
 * provide size to a cell.
 */
.Arrange-sizeFit img {
  max-width: none !important;
  width: auto !important; }

/* Vertical alignment modifiers
   ========================================================================== */
.Arrange--middle .Arrange-sizeFill,
.Arrange--middle .Arrange-sizeFit {
  vertical-align: middle; }

.Arrange--bottom .Arrange-sizeFill,
.Arrange--bottom .Arrange-sizeFit {
  vertical-align: bottom; }

/* Equal-width modifier
   ========================================================================== */
/**
 * This layout algorithm will create equal-width table cells, irrespective of
 * the width of their content.
 */
.Arrange--equal {
  table-layout: fixed; }

/**
 * Give the cells an equal width. This value ensures that Arrange is still 100%
 * wide when gutters are used in conjunctions with equal-width cells.
 *
 * It's recommended that only 'Arrange-sizeFill' be used for equal width cells.
 * Their inner images will automatically be responsive.
 */
.Arrange--equal > .Arrange-sizeFill,
.Arrange--equal > .Arrange-sizeFit {
  width: 1%; }

/* Gutter modifier
   ========================================================================== */
/**
 * Add a gutter between cells
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */
.Arrange--withGutter {
  margin: 0 -5px; }

.Arrange--withGutter > .Arrange-sizeFit,
.Arrange--withGutter > .Arrange-sizeFill {
  padding: 0 5px; }

/** @define Button; use strict */
/**
 * The button classes are best applied to links, buttons, and submit inputs.
 * These components can be used in forms, as calls to action, or as part of the
 * general UI of the site/app.
 */
/**
 * 1. Corrects inability to style clickable `input` types in iOS.
 * 2. Normalize `box-sizing` across all elements that this component could be
 *    applied to.
 * 3. Inherit text color from ancestor.
 * 4. Inherit font styles from ancestor.
 * 5. Normalize `line-height`. For `input`, it can't be changed from `normal` in Firefox 4+.
 * 6. Prevent button text from being selectable.
 * 7. Make sure `input` will wrap text across multiple lines.
 */
.Button {
  -webkit-appearance: none;
  /* 1 */
  background: transparent;
  border-color: currentcolor;
  border-style: solid;
  border-width: 1px;
  box-sizing: border-box;
  /* 2 */
  color: inherit;
  /* 3 */
  cursor: pointer;
  display: inline-block;
  font: inherit;
  /* 4 */
  line-height: normal;
  /* 5 */
  margin: 0;
  padding: 0.4em 0.75em;
  position: relative;
  text-align: center;
  text-decoration: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  /* 6 */
  white-space: normal;
  /* 7 */ }

/**
 * Remove excess padding and border in Firefox 4+
 */
.Button::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */
.Button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color; }

/**
 * UI states
 */
.Button:hover,
.Button:focus,
.Button:active {
  text-decoration: none; }

.Button:disabled,
.Button.is-disabled {
  cursor: default;
  opacity: 0.6; }

/** @define FlexEmbed; use strict */
/**
 * Flexible media embeds
 *
 * For use with media embeds – such as videos, slideshows, or even images –
 * that need to retain a specific aspect ratio but adapt to the width of their
 * containing element.
 *
 * Based on: http://alistapart.com/article/creating-intrinsic-ratios-for-video
 */
.FlexEmbed {
  display: block;
  overflow: hidden;
  position: relative; }

/**
 * The aspect-ratio hack is applied to an empty element because it allows
 * the component to respect `max-height`. Default aspect ratio is 1:1.
 */
.FlexEmbed-ratio {
  display: block;
  padding-bottom: 100%;
  width: 100%; }

/**
 * Modifier: 3:1 aspect ratio
 */
.FlexEmbed-ratio--3by1 {
  padding-bottom: 33.33333333333333%; }

/**
 * Modifier: 2:1 aspect ratio
 */
.FlexEmbed-ratio--2by1 {
  padding-bottom: 50%; }

/**
 * Modifier: 16:9 aspect ratio
 */
.FlexEmbed-ratio--16by9 {
  padding-bottom: 56.25%; }

/**
 * Modifier: 4:3 aspect ratio
 */
.FlexEmbed-ratio--4by3 {
  padding-bottom: 75%; }

/**
 * Fit the content to the aspect ratio
 */
.FlexEmbed-content {
  bottom: 0;
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%; }

/** @define Grid; use strict */
/**
 * Core grid component
 *
 * DO NOT apply dimension or offset utilities to the `Grid` element. All cell
 * widths and offsets should be applied to child grid cells.
 */
/* Grid container
   ========================================================================== */
/**
 * All content must be contained within child `Grid-cell` elements.
 *
 * 1. Account for browser defaults of elements that might be the root node of
 *    the component.
 * 2. Remove inter-cell whitespace that appears between `inline-block` child
 *    elements.
 * 3. Ensure consistent default alignment.
 */
.Grid {
  display: block;
  /* 1 */
  font-size: 0;
  /* 2 */
  margin: 0;
  /* 1 */
  padding: 0;
  /* 1 */
  text-align: left;
  /* 3 */ }

/**
 * Modifier: center align all grid cells
 */
.Grid--alignCenter {
  text-align: center; }

/**
 * Modifier: right align all grid cells
 */
.Grid--alignRight {
  text-align: right; }

/**
 * Modifier: middle-align grid cells
 */
.Grid--alignMiddle > .Grid-cell {
  vertical-align: middle; }

/**
 * Modifier: bottom-align grid cells
 */
.Grid--alignBottom > .Grid-cell {
  vertical-align: bottom; }

/**
 * Modifier: gutters
 *
 * NOTE: this can trigger a horizontal scrollbar if the component is as wide as
 * the viewport. Use padding on a container, or `overflow-x:hidden` to protect
 * against it.
 */
.Grid--withGutter {
  margin: 0 calc(-0.5 * 20px); }

.Grid--withGutter > .Grid-cell {
  padding: 0 calc(0.5 * 20px); }

/* Grid cell
   ========================================================================== */
/**
 * No explicit width by default. Rely on combining `Grid-cell` with a dimension
 * utility or a component class that extends 'grid'.
 *
 * 1. Fundamentals of the non-float grid layout.
 * 2. Reset font size change made in `Grid`.
 * 3. Keeps content correctly aligned with the grid direction.
 * 4. Controls vertical positioning of units.
 * 5. Make cells full-width by default.
 */
.Grid-cell {
  box-sizing: border-box;
  display: inline-block;
  /* 1 */
  font-size: 1rem;
  /* 2 */
  margin: 0;
  padding: 0;
  text-align: left;
  /* 3 */
  vertical-align: top;
  /* 4 */
  width: 100%;
  /* 5 */ }

/**
 * Modifier: horizontally center one unit
 * Set a specific unit to be horizontally centered. Doesn't affect
 * any other units. Can still contain a child `Grid` object.
 */
.Grid-cell--center {
  display: block;
  margin: 0 auto; }

/**
 * App styles
 */
/* ==================================================================

    MIXINS

   ================================================================== */
/**
 * Clearfix: for modern browsers.
 * 1. The space content is one way to avoid an Opera bug when the
 *    contenteditable attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that are clearfixed.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
/**
 * Absolute center
 * Req's a parent w/ 'position: relative'
 */
/**
 * Sizing
 * @link: http://www.sitepoint.com/sass-mixins-kickstart-project/
 */
/**
 * Position
 * @link: http://www.sitepoint.com/sass-mixins-kickstart-project/
 * @usage: .element { @include absolute(top 0 left 1em); }
 */
/**
 * Scut strip unit
 * http://davidtheclark.github.io/scut/strip-unit.html
 */
/**
 * Scut px to rem
 * http://davidtheclark.github.io/scut/rem.html
 * Requires: `scut-strip-unit`.
 * Renamed rem() from scut-rem() for ease of use.
 */
/**
 * Scut rem fallback
 * http://davidtheclark.github.io/scut/remFallback.html
 * Requires: scut-rem and scut-strip-unit.
 * Renamed remFallback() from scut-remFallback() for ease of use.
 */
/*
 * Scut font-face
 * http://davidtheclark.github.io/scut/font-face.html
 * Renamed font-face() from scut-font-face() for ease of use.
 */
/**
 * easy media queries
 * @include bp(tablet) { … };
 * http://css-tricks.com/conditional-media-query-mixins/
 * See also: foundation, bootstrap, inuit
 */
/* ==========================================================================

   VARIABLE SETTINGS

   ========================================================================== */
/**
 * Colours
 */
/**
 * Type sizes
 */
/**
 * Column sizes
 *
 =========================================================================
 todo: as map?
 =========================================================================
 */
/**
 * Spaces
 */
/**
 * Fonts
 */
@font-face {
  font-family: "LyonText-Regular";
  font-weight: normal;
  font-style: normal;
  src: url("/source/fonts/LyonText-Regular.eot");
  src: url("/source/fonts/LyonText-Regular.eot?#iefix") format("embedded-opentype"), url("/source/fonts/LyonText-Regular.woff") format("woff"), url("/source/fonts/LyonText-Regular.ttf") format("truetype"), url("/source/fonts/LyonText-Regular.svg#LyonText-Regular") format("svg"); }

@font-face {
  font-family: "LyonText-RegularItalic";
  font-weight: normal;
  font-style: normal;
  src: url("/source/fonts/LyonText-RegularItalic.eot");
  src: url("/source/fonts/LyonText-RegularItalic.eot?#iefix") format("embedded-opentype"), url("/source/fonts/LyonText-RegularItalic.woff") format("woff"), url("/source/fonts/LyonText-RegularItalic.ttf") format("truetype"), url("/source/fonts/LyonText-RegularItalic.svg#LyonText-RegularItalic") format("svg"); }

@font-face {
  font-family: "LyonText-SemiboldItalic";
  font-weight: normal;
  font-style: normal;
  src: url("/source/fonts/LyonText-SemiboldItalic.eot");
  src: url("/source/fonts/LyonText-SemiboldItalic.eot?#iefix") format("embedded-opentype"), url("/source/fonts/LyonText-SemiboldItalic.woff") format("woff"), url("/source/fonts/LyonText-SemiboldItalic.ttf") format("truetype"), url("/source/fonts/LyonText-SemiboldItalic.svg#LyonText-SemiboldItalic") format("svg"); }

@font-face {
  font-family: "LyonText-Bold";
  font-weight: normal;
  font-style: normal;
  src: url("/source/fonts/LyonText-Bold.eot");
  src: url("/source/fonts/LyonText-Bold.eot?#iefix") format("embedded-opentype"), url("/source/fonts/LyonText-Bold.woff") format("woff"), url("/source/fonts/LyonText-Bold.ttf") format("truetype"), url("/source/fonts/LyonText-Bold.svg#LyonText-Bold") format("svg"); }

@font-face {
  font-family: "LyonText-BoldItalic";
  font-weight: normal;
  font-style: normal;
  src: url("/source/fonts/LyonText-BoldItalic.eot");
  src: url("/source/fonts/LyonText-BoldItalic.eot?#iefix") format("embedded-opentype"), url("/source/fonts/LyonText-BoldItalic.woff") format("woff"), url("/source/fonts/LyonText-BoldItalic.ttf") format("truetype"), url("/source/fonts/LyonText-BoldItalic.svg#LyonText-BoldItalic") format("svg"); }

@font-face {
  font-family: "FoundersGroteskCond-Lt";
  font-weight: normal;
  font-style: normal;
  src: url("/source/fonts/FoundersGroteskCond-Lt.eot");
  src: url("/source/fonts/FoundersGroteskCond-Lt.eot?#iefix") format("embedded-opentype"), url("/source/fonts/FoundersGroteskCond-Lt.woff") format("woff"), url("/source/fonts/FoundersGroteskCond-Lt.ttf") format("truetype"), url("/source/fonts/FoundersGroteskCond-Lt.svg#FoundersGroteskCond-Lt") format("svg"); }

@font-face {
  font-family: "FoundersGroteskCond-Reg";
  font-weight: normal;
  font-style: normal;
  src: url("/source/fonts/FoundersGroteskCond-Reg.eot");
  src: url("/source/fonts/FoundersGroteskCond-Reg.eot?#iefix") format("embedded-opentype"), url("/source/fonts/FoundersGroteskCond-Reg.woff") format("woff"), url("/source/fonts/FoundersGroteskCond-Reg.ttf") format("truetype"), url("/source/fonts/FoundersGroteskCond-Reg.svg#FoundersGroteskCond-Reg") format("svg"); }

@font-face {
  font-family: "FoundersGroteskCond-Med";
  font-weight: normal;
  font-style: normal;
  src: url("/source/fonts/FoundersGroteskCond-Med.eot");
  src: url("/source/fonts/FoundersGroteskCond-Med.eot?#iefix") format("embedded-opentype"), url("/source/fonts/FoundersGroteskCond-Med.woff") format("woff"), url("/source/fonts/FoundersGroteskCond-Med.ttf") format("truetype"), url("/source/fonts/FoundersGroteskCond-Med.svg#FoundersGroteskCond-Med") format("svg"); }

@font-face {
  font-family: "FoundersGroteskCond-Bold";
  font-weight: normal;
  font-style: normal;
  src: url("/source/fonts/FoundersGroteskCond-Bold.eot");
  src: url("/source/fonts/FoundersGroteskCond-Bold.eot?#iefix") format("embedded-opentype"), url("/source/fonts/FoundersGroteskCond-Bold.woff") format("woff"), url("/source/fonts/FoundersGroteskCond-Bold.ttf") format("truetype"), url("/source/fonts/FoundersGroteskCond-Bold.svg#FoundersGroteskCond-Bold") format("svg"); }

/**
 * Z-Index Scale (private vars)
 */
/* ==========================================================================

   SPACER HELPERS

   ========================================================================== */
/**
 * Spaces

$space-unit            : rem($base-line-height); // 39
$space--D6             : $space-unit / 6;        // 7px
$space--D3             : $space-unit / 3;        // 13px
$space--D2             : $space-unit / 2;        // 20px
$space--D1             : $space-unit / 1.33333;  // 29px
$space                 : $space-unit * 1;        // 39px
$space--X13            : $space-unit * 1.33333;  // 52px
$space--X15            : $space-unit * 1.5;      // 59px
$space--X2             : $space-unit * 2;        // 78px
$space--X25            : $space-unit * 2.5;      // 98px
$space--X3             : $space-unit * 3;        // 117px
$space--X4             : $space-unit * 4;        // 156px
$space--X5             : $space-unit * 5;        // 195px
$space--X6             : $space-unit * 6;        // 234px
$space--XL             : $space-unit * 10;       // 390px

 */
/* Margin spaces
   ========================================================================== */
.u-margin0 {
  margin: 0 !important; }

.u-marginNTD3 {
  margin-top: -0.65625rem !important; }

.u-marginNTD2 {
  margin-top: -0.98438rem !important; }

.u-marginNTD1 {
  margin-top: -1.47657rem !important; }

.u-marginNT {
  margin-top: -1.96875rem !important; }

.u-marginT0 {
  margin-top: 0 !important; }

.u-marginTD6 {
  margin-top: 0.32812rem !important; }

.u-marginTD3 {
  margin-top: 0.65625rem !important; }

.u-marginTD2 {
  margin-top: 0.98438rem !important; }

.u-marginTD1 {
  margin-top: 1.47657rem !important; }

.u-marginT {
  margin-top: 1.96875rem !important; }

.u-marginTX13 {
  margin-top: 2.62499rem !important; }

.u-marginTX15 {
  margin-top: 2.95312rem !important; }

.u-marginTX2 {
  margin-top: 3.9375rem !important; }

.u-marginTX25 {
  margin-top: 4.92188rem !important; }

.u-marginTX3 {
  margin-top: 5.90625rem !important; }

.u-marginTX4 {
  margin-top: 7.875rem !important; }

.u-marginTX5 {
  margin-top: 9.84375rem !important; }

.u-marginTX6 {
  margin-top: 11.8125rem !important; }

.u-marginTXL {
  margin-top: 19.6875rem !important; }

.u-marginB0 {
  margin-bottom: 0 !important; }

.u-marginBD6 {
  margin-bottom: 0.32812rem !important; }

.u-marginBD3 {
  margin-bottom: 0.65625rem !important; }

.u-marginBD2 {
  margin-bottom: 0.98438rem !important; }

.u-marginBD1 {
  margin-bottom: 1.47657rem !important; }

.u-marginB {
  margin-bottom: 1.96875rem !important; }

.u-marginBX13 {
  margin-bottom: 2.62499rem !important; }

.u-marginBX15 {
  margin-bottom: 2.95312rem !important; }

.u-marginBX2 {
  margin-bottom: 3.9375rem !important; }

.u-marginBX25 {
  margin-bottom: 4.92188rem !important; }

.u-marginBX3 {
  margin-bottom: 5.90625rem !important; }

.u-marginBX35 {
  margin-bottom: 6.53125rem !important; }

.u-marginBX4 {
  margin-bottom: 7.875rem !important; }

.u-marginBX5 {
  margin-bottom: 9.84375rem !important; }

.u-marginBX6 {
  margin-bottom: 11.8125rem !important; }

.u-marginBXL {
  margin-bottom: 19.6875rem !important; }

.u-marginLD6 {
  margin-left: 0.32812rem !important; }

.u-marginLD3 {
  margin-left: 0.65625rem !important; }

.u-marginLD2 {
  margin-left: 0.98438rem !important; }

.u-marginLD1 {
  margin-left: 1.47657rem !important; }

.u-marginL {
  margin-left: 1.96875rem !important; }

.u-marginRD6 {
  margin-right: 0.32812rem !important; }

.u-marginRD2 {
  margin-right: 0.98438rem !important; }

.u-marginRD1 {
  margin-right: 1.47657rem !important; }

.u-marginR {
  margin-right: 1.96875rem !important; }

@media (min-width: 600px) {
  .u-xs-marginB {
    margin-bottom: 1.96875rem !important; } }

/* Padding spaces
   ========================================================================== */
.u-paddingT0 {
  padding-top: 0 !important; }

.u-paddingTD6 {
  padding-top: 0.32812rem !important; }

.u-paddingTD3 {
  padding-top: 0.65625rem !important; }

.u-paddingTD2 {
  padding-top: 0.98438rem !important; }

.u-paddingTD1 {
  padding-top: 1.47657rem !important; }

.u-paddingT {
  padding-top: 1.96875rem !important; }

.u-paddingTX13 {
  padding-top: 2.62499rem !important; }

.u-paddingTX15 {
  padding-top: 2.95312rem !important; }

.u-paddingTX2 {
  padding-top: 3.9375rem !important; }

.u-paddingTX25 {
  padding-top: 4.92188rem !important; }

.u-paddingTX3 {
  padding-top: 5.90625rem !important; }

.u-paddingTX4 {
  padding-top: 7.875rem !important; }

.u-paddingTX5 {
  padding-top: 9.84375rem !important; }

.u-paddingTX6 {
  padding-top: 11.8125rem !important; }

.u-paddingB0 {
  padding-bottom: 0 !important; }

.u-paddingBD6 {
  padding-bottom: 0.32812rem !important; }

.u-paddingBD3 {
  padding-bottom: 0.65625rem !important; }

.u-paddingBD2 {
  padding-bottom: 0.98438rem !important; }

.u-paddingBD1 {
  padding-bottom: 1.47657rem !important; }

.u-paddingB {
  padding-bottom: 1.96875rem !important; }

.u-paddingBX13 {
  padding-bottom: 2.62499rem !important; }

.u-paddingBX15 {
  padding-bottom: 2.95312rem !important; }

.u-paddingBX2 {
  padding-bottom: 3.9375rem !important; }

.u-paddingBX25 {
  padding-bottom: 4.92188rem !important; }

.u-paddingBX3 {
  padding-bottom: 5.90625rem !important; }

.u-paddingBX4 {
  padding-bottom: 7.875rem !important; }

.u-paddingBX5 {
  padding-bottom: 9.84375rem !important; }

.u-paddingBX6 {
  padding-bottom: 11.8125rem !important; }

.u-paddingBX61 {
  padding-bottom: 13.78125rem !important; }

.u-paddingLD6 {
  padding-left: 0.32812rem !important; }

.u-paddingLD2 {
  padding-left: 0.98438rem !important; }

.u-paddingLD1 {
  padding-left: 1.47657rem !important; }

.u-paddingL {
  padding-left: 1.96875rem !important; }

.u-paddingLX2 {
  padding-left: 3.9375rem !important; }

.u-paddingRD6 {
  padding-right: 0.32812rem !important; }

.u-paddingRD2 {
  padding-right: 0.98438rem !important; }

.u-paddingR {
  padding-right: 1.96875rem !important; }

.u-paddingRX2 {
  padding-right: 3.9375rem !important; }

@media (min-width: 767px) {
  .u-sm-paddingL0 {
    padding-left: 0          !important; }
  .u-sm-paddingB0 {
    padding-bottom: 0          !important; }
  .u-sm-paddingBX4 {
    padding-bottom: 7.875rem !important; }
  .u-sm-marginB0 {
    margin-bottom: 0          !important; }
  .u-sm-marginB {
    margin-bottom: 1.96875rem !important; }
  .u-sm-marginBX2 {
    margin-bottom: 3.9375rem !important; }
  .u-sm-marginTX2 {
    margin-top: 3.9375rem !important; } }

/* Margin spaces (responsive)
   ========================================================================== */
@media (max-width: 29.9375em) {
  .u-marginNTD3 {
    margin-top: -0.39375rem !important; }
  .u-marginNT {
    margin-top: -1.18125rem !important; }
  .u-marginTD6 {
    margin-top: 0.19687rem !important; }
  .u-marginTD3 {
    margin-top: 0.39375rem !important; }
  .u-marginTD2 {
    margin-top: 0.59062rem !important; }
  .u-marginTD1 {
    margin-top: 0.88594rem !important; }
  .u-marginT {
    margin-top: 1.18125rem !important; }
  .u-marginTX13 {
    margin-top: 1.575rem !important; }
  .u-marginTX15 {
    margin-top: 1.77187rem !important; }
  .u-marginTX2 {
    margin-top: 2.3625rem !important; }
  .u-marginTX25 {
    margin-top: 2.95312rem !important; }
  .u-marginTX3 {
    margin-top: 3.54375rem !important; }
  .u-marginTX4 {
    margin-top: 4.725rem !important; }
  .u-marginTX5 {
    margin-top: 5.90625rem !important; }
  .u-marginTX6 {
    margin-top: 7.0875rem !important; }
  .u-marginBD6 {
    margin-bottom: 0.19687rem !important; }
  .u-marginBD3 {
    margin-bottom: 0.39375rem !important; }
  .u-marginBD2 {
    margin-bottom: 0.59062rem !important; }
  .u-marginBD1 {
    margin-bottom: 0.88594rem !important; }
  .u-marginB {
    margin-bottom: 1.18125rem !important; }
  .u-marginBX13 {
    margin-bottom: 1.575rem !important; }
  .u-marginBX15 {
    margin-bottom: 1.77187rem !important; }
  .u-marginBX2 {
    margin-bottom: 2.3625rem !important; }
  .u-marginBX25 {
    margin-bottom: 2.95312rem !important; }
  .u-marginBX3 {
    margin-bottom: 3.54375rem !important; }
  .u-marginBX35 {
    margin-bottom: 6.28125rem !important; }
  .u-marginBX4 {
    margin-bottom: 4.725rem !important; }
  .u-marginBX5 {
    margin-bottom: 5.90625rem !important; }
  .u-marginBX6 {
    margin-bottom: 7.0875rem !important; }
  .u-marginLD6 {
    margin-left: 0.19687rem !important; }
  .u-marginLD3 {
    margin-left: 0.39375rem !important; }
  .u-marginLD2 {
    margin-left: 0.59062rem !important; }
  .u-marginL {
    margin-left: 1.18125rem !important; }
  .u-paddingRX2 {
    padding-right: 2.3625rem !important; } }

/* @media (max-width: 30em) { @content; } */
/* ==========================================================================

   HELPERS

   ========================================================================== */
/**
 * Hide or show things responsively
 */
@media (min-width: 767px) {
  .u-hideDesk {
    display: none !important; } }

/* uncss:ignore */
.u-hideMobile {
  display: none; }
  @media (min-width: 600px) {
    .u-hideMobile {
      display: block !important; } }

/* uncss:ignore */
.u-hideMobileInline {
  display: none; }
  @media (min-width: 600px) {
    .u-hideMobileInline {
      display: inline-block !important; } }

/* uncss:ignore */
@media (min-width: 1200px) {
  .u-lg-textCenter {
    text-align: center !important; } }

/**
 * Full height or width
 */
.u-fullHeight {
  height: 100%; }

.u-fullWidth {
  width: 100%; }

/**
 * Rules
 */
.SectionRuler {
  border-top: 1px solid rgba(153, 153, 153, 0.4);
  padding-top: 1.96875rem; }

.sm-SectionRuler {
  border-top: 1px solid rgba(153, 153, 153, 0.4);
  padding-top: 1.96875rem; }
  @media (min-width: 767px) {
    .sm-SectionRuler {
      display: none; } }

/**
 * Background colors
 */
.u-bgNeutral {
  background-color: #F5F4F5 !important; }

.u-bgLink {
  background-color: #333 !important; }

.u-bgBg {
  background-color: #fdfdfd !important; }

/**
 * Z-index mixin
 */
/* ==================================================================

   BASE

   ================================================================== */
/**
 * Set the global `box-sizing` state to `border-box`.
 * css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice
 * paulirish.com/2012/box-sizing-border-box-ftw
 */
html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

/**
 * Page-level styling from InuitCSS.
 *
 * 1. Set the default `font-size` and `line-height` for the entire project,
 *    sourced from our default variables. The `font-size` is calculated to exist
 *    in rems, the `line-height` is calculated to exist unitlessly.
 * 2. Force scrollbars to always be visible to prevent awkward ‘jumps’ when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally. Also req'd for [6].
 * 3. Ensure the page always fills at least the entire height of the viewport.
 * 4. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom. (Already in Suit).
 * 5. Fonts on OSX will look more consistent with other systems that do not
 *    render text using sub-pixel anti-aliasing.
 * 6. Fluid scroll for Safari mobile. Requires [2] "overflow-y: scroll".
 *    See: http://css-tricks.com/snippets/css/momentum-scrolling-on-ios-overflow-elements/
 *    [Currently seems to not work though? Needs research].
 * 7. From here down, a typography reset site-wide.
 */
html {
  background-color: #fdfdfd;
  color: #333;
  height: 100%;
  /* 3 */
  font-size: 80%;
  /* 1 */
  line-height: 1.5;
  /* 1 */
  min-height: 100%;
  /* 3 */
  overflow-y: scroll;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-size-adjust: 100%;
  /* 4 */
  -moz-osx-font-smoothing: grayscale;
  /* 5 */
  -webkit-font-smoothing: antialiased;
  /* 5 */
  -webkit-overflow-scrolling: touch;
  /* 6 */ }
  @media (min-width: 767px) {
    html {
      font-size: 100%; } }

/* ==========================================================================

    IMAGES

   ========================================================================== */
/**
 * 1. Fluid images for responsive purposes.
 * 2. Offset `alt` text from surrounding copy.
 * 3. Setting `vertical-align` removes the whitespace that appears under `img`
 *    elements when they are dropped into a page as-is. Safer alternative to
 *    using `display: block;`.
 */
img {
  max-width: 100%;
  /* [1] */
  font-style: italic;
  /* [2] */
  vertical-align: middle;
  /* [3] */ }

/**
 * 1. Google Maps breaks if `max-width: 100%` acts upon it; use their selector
 *    to remove the effects.
 * 2. If a `width` and/or `height` attribute have been explicitly defined, let’s
 *    not make the image fluid.
 */
.gm-style img,
img[width],
img[height] {
  /* [2] */
  /* max-width: none; */ }

/**
 * Circle it.
 */
.img-circle {
  border-radius: 50%; }

/**
 * Theme the zoom.js overlay
 */
.zoom-overlay {
  background-color: #F5F4F5 !important; }

/* ==========================================================================

    TYPOGRAPHIC ANCHORS

   ========================================================================== */
/**
 * Anchor styles mixin
 */
/* Brand text anchor
   ========================================================================== */
/* Grey text anchor
   ========================================================================== */
/* White text anchor
   ========================================================================== */
/* Large headline anchor
   ========================================================================== */
/* No visual appearance
   ========================================================================== */
/* Classed
   ========================================================================== */
a,
.u-link {
  background-image: linear-gradient(to bottom, rgba(51, 51, 51, 0) 50%, rgba(51, 51, 51, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: currentColor;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    a,
    .u-link {
      background-position: 0 1.125rem; } }
  a:hover, a:active, a:focus,
  .u-link:hover,
  .u-link:active,
  .u-link:focus {
    background-image: none;
    color: #0071bc;
    text-decoration: none; }

.u-childLink a {
  background-image: linear-gradient(to bottom, rgba(51, 51, 51, 0) 50%, rgba(51, 51, 51, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: currentColor;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    .u-childLink a {
      background-position: 0 1.125rem; } }
  .u-childLink a:hover, .u-childLink a:active, .u-childLink a:focus {
    background-image: none;
    color: #0071bc;
    text-decoration: none; }

.u-linkBrand {
  background-image: linear-gradient(to bottom, rgba(0, 113, 188, 0) 50%, rgba(0, 113, 188, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: #0071bc;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    .u-linkBrand {
      background-position: 0 1.125rem; } }
  .u-linkBrand:hover, .u-linkBrand:active, .u-linkBrand:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

.u-childLinkBrand a {
  background-image: linear-gradient(to bottom, rgba(0, 113, 188, 0) 50%, rgba(0, 113, 188, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: #0071bc;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    .u-childLinkBrand a {
      background-position: 0 1.125rem; } }
  .u-childLinkBrand a:hover, .u-childLinkBrand a:active, .u-childLinkBrand a:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

.u-linkGrey {
  background-image: linear-gradient(to bottom, rgba(153, 153, 153, 0) 50%, rgba(153, 153, 153, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: inherit;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    .u-linkGrey {
      background-position: 0 1.125rem; } }
  .u-linkGrey:hover, .u-linkGrey:active, .u-linkGrey:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

.u-childLinkGrey a {
  background-image: linear-gradient(to bottom, rgba(153, 153, 153, 0) 50%, rgba(153, 153, 153, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: inherit;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    .u-childLinkGrey a {
      background-position: 0 1.125rem; } }
  .u-childLinkGrey a:hover, .u-childLinkGrey a:active, .u-childLinkGrey a:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

.u-linkWhite {
  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: inherit;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    .u-linkWhite {
      background-position: 0 1.125rem; } }
  .u-linkWhite:hover, .u-linkWhite:active, .u-linkWhite:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

.u-childLinkWhite a {
  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: inherit;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    .u-childLinkWhite a {
      background-position: 0 1.125rem; } }
  .u-childLinkWhite a:hover, .u-childLinkWhite a:active, .u-childLinkWhite a:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

.u-linkHeadline {
  background-image: none;
  color: currentColor;
  text-decoration: none; }
  .u-linkHeadline:hover, .u-linkHeadline:active, .u-linkHeadline:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

.u-childLinkHeadline a {
  background-image: none;
  color: currentColor;
  text-decoration: none; }
  .u-childLinkHeadline a:hover, .u-childLinkHeadline a:active, .u-childLinkHeadline a:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

.u-linkInvisible {
  background-image: none !important;
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: inherit;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    .u-linkInvisible {
      background-position: 0 1.125rem; } }
  .u-linkInvisible:hover, .u-linkInvisible:active, .u-linkInvisible:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

.u-childLinkInvisible a {
  background-image: none !important;
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 100%;
  color: inherit;
  padding-bottom: 0.25rem;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  @media (max-width: 29.9375em) {
    .u-childLinkInvisible a {
      background-position: 0 1.125rem; } }
  .u-childLinkInvisible a:hover, .u-childLinkInvisible a:active, .u-childLinkInvisible a:focus {
    background-image: none;
    color: inherit;
    text-decoration: none; }

/* ==========================================================================

    TYPOGRAPHIC ARROWS

   ========================================================================== */
.arrow-holder {
  display: inline-block;
  background-position: 0 19px !important; }

.arrow {
  display: block;
  float: right;
  margin-top: .5em;
  border-color: transparent;
  border-top-color: #D00;
  border-style: solid;
  border-width: .5em .31em 0;
  width: 0;
  height: 0;
  position: relative;
  line-height: 0; }

.arrow-up {
  border-width: 0 .31em .5em;
  border-top-color: transparent;
  border-bottom-color: #FA0; }

.arrow-left {
  border-width: .31em 0.5em .31em .0;
  border-top-color: transparent;
  border-right-color: #04F; }

.arrow-right {
  border-width: .31em 0 .31em .5em;
  border-top-color: transparent;
  border-left-color: #737373;
  margin-left: 0.3125rem; }
  .arrow-holder:hover .arrow-right {
    border-left-color: #0071bc; }

.Arrow-right:after {
  border-top: .3em solid transparent;
  border-bottom: .3em solid transparent;
  border-left: .3em solid;
  content: "";
  display: inline-block;
  height: 0;
  margin-left: .35rem;
  transform: translateY(-0.125rem);
  vertical-align: middle;
  width: 0; }

.Arrow-bottom:after {
  border-top: .3em solid transparent;
  border-bottom: .3em solid transparent;
  border-left: .3em solid;
  content: "";
  display: inline-block;
  height: 0;
  margin-left: .35rem;
  transform: translateY(-0.125rem);
  vertical-align: middle;
  width: 0; }

h1 {
  font-style: normal;
  font-weight: normal;
  font-size: 51px;
  font-size: 3.1875rem;
  border-bottom: 1px solid currentColor;
  color: white;
  font-family: "FoundersGroteskCond-Lt";
  letter-spacing: 0.03em;
  line-height: 1;
  margin-bottom: 1.47656rem;
  padding-bottom: 0.49219rem;
  text-transform: lowercase; }

h2 {
  font-style: normal;
  font-weight: normal;
  font-size: 20px;
  font-size: 1.25rem;
  color: #333;
  font-family: "FoundersGroteskCond-Bold";
  letter-spacing: 0.05em;
  line-height: 1;
  margin-bottom: 2.95312rem;
  text-transform: uppercase; }
  h2 span {
    border-bottom: 1px solid #333;
    padding-bottom: 0.49219rem; }

h3 {
  font-style: normal;
  font-weight: normal;
  font-size: 26px;
  font-size: 1.625rem;
  font-size: 26px;
  font-size: 1.625rem;
  color: #333;
  font-family: "FoundersGroteskCond-Bold";
  line-height: calc(1.625rem * 1.5);
  letter-spacing: 0.03em;
  margin-bottom: 0.49219rem;
  margin-bottom: 0; }

.u-textSm {
  font-size: 17px;
  font-size: 1.0625rem; }

.u-textSmEmB {
  font-size: 17px;
  font-size: 1.0625rem;
  font-family: "LyonText-SemiboldItalic", Georgia, Times, serif; }

.u-textRg {
  font-size: 21px;
  font-size: 1.3125rem; }

.u-textRgEmB {
  font-size: 21px;
  font-size: 1.3125rem;
  font-family: "LyonText-SemiboldItalic", Georgia, Times, serif; }

.u-textLg {
  font-size: 21px;
  font-size: 1.3125rem; }

html {
  color: #333;
  font-family: "LyonText-Regular", Georgia, Times, serif;
  font-size: 80%;
  line-height: 1.5;
  text-align: left;
  text-rendering: optimizeLegibility;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
  text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased; }
  @media (min-width: 992px) {
    html {
      font-size: 90%; } }
  @media (min-width: 767px) {
    html {
      font-size: 100%; } }

ul, ol, li, dl,
blockquote, p, address,
table, time,
fieldset, figure,
pre,
.Text {
  font-style: normal;
  font-weight: normal;
  font-size: 21px;
  font-size: 1.3125rem;
  color: #333;
  font-family: "LyonText-Regular", Georgia, Times, serif;
  letter-spacing: 0;
  line-height: 1.5;
  text-align: left;
  text-transform: none; }

ul {
  list-style-type: none; }

ol {
  list-style-type: decimal; }

em,
.u-textEm {
  font-style: normal;
  font-weight: normal;
  font-family: "LyonText-RegularItalic", Georgia, Times, serif; }

b,
.u-textBold {
  font-style: normal;
  font-weight: normal;
  font-family: "LyonText-Bold", Georgia, Times, serif; }

/* ==========================================================================

    TYPOGRAPHIC VERTICAL RHYTHM

   ========================================================================== */
/**
 *
 * Where `margin-bottom` is concerned,this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 *
 */
h1, h2, h3, h4, h5, h6,
ul, ol, li, dl,
blockquote, p, address,
table, time,
fieldset,
pre {
  margin-bottom: 0.98438rem; }

.u-halfVertRhythm,
.u-halfVertRhythm p {
  margin-bottom: 0.32812rem; }

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
ul, ol, dd {
  /* margin-left: $space--D1; */ }

/**
 * Manage section block spacings only with headlines
 */
.Container p:last-child,
.Container p:last-child a,
.Container li:last-child,
.Container li:last-child a,
.Container ol:last-child,
.Container ol:last-child a {
  margin-bottom: 0; }

.RuleTransition {
  display: inline-block;
  transform: translateZ(0);
  /* @include improveAntiAlias(); */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-osx-font-smoothing: grayscale;
  /* @include anticipatePainting(); */
  display: inline-block;
  border-radius: 0;
  padding-bottom: 0;
  position: relative;
  color: white; }
  .RuleTransition:before {
    background-color: white;
    bottom: 0;
    content: "";
    height: 0.0625rem;
    left: 0;
    position: absolute;
    right: 100%;
    transition-property: right;
    transition-duration: 0.15s;
    transition-timing-function: ease-out;
    z-index: -1; }
    @media (min-width: 767px) {
      .RuleTransition:before {
        height: 0.0625rem; } }
  .RuleTransition:hover, .RuleTransition:active, .RuleTransition:focus {
    color: white;
    padding-bottom: 0rem; }
  .RuleTransition:hover:before, .RuleTransition:focus:before, .RuleTransition:active:before, .RuleTransition.is-active:before {
    right: 0; }
  .RuleTransition:focus:before, .RuleTransition:active:before, .RuleTransition.is-active:before {
    background-color: #333; }
  .RuleTransition.is-active.is-transRev:before {
    background-color: #333; }
  .RuleTransition.is-active {
    color: #333; }

/* ==================================================================

   BUTTONS

   ================================================================== */
.Button {
  font-style: normal;
  font-weight: normal;
  font-size: 20px;
  font-size: 1.25rem;
  color: #333;
  font-family: "FoundersGroteskCond-Bold";
  letter-spacing: 0.05em;
  line-height: 1;
  margin-bottom: 2.95312rem;
  text-transform: uppercase;
  background-color: #333;
  border: 0;
  border-radius: 0.25rem;
  color: white;
  margin-bottom: 0;
  padding: 1.125rem 2rem 0.75rem;
  text-align: center; }
  .Button span {
    border-bottom: 1px solid #333;
    padding-bottom: 0.49219rem; }
  .Button span {
    border-bottom: 1px solid #333;
    padding-bottom: 0.49219rem; }
  .Button:hover, .Button:active, .Button:focus {
    color: #e6e6e6; }

.Button--lg {
  padding: 1.125rem 3.9375rem 0.75rem; }

.Button--rev {
  background-color: white;
  color: #333; }
  .Button--rev:hover, .Button--rev:active, .Button--rev:focus {
    background-color: #e6e6e6;
    color: #333; }

.Button--alt {
  background-color: #D4BCD3;
  border: 1px solid transparent;
  color: white; }
  .Button--alt:hover, .Button--alt:active, .Button--alt:focus {
    background-color: #c09dbf;
    color: white; }

.Button--transparent {
  background-color: #F5F4F5;
  color: #333;
  cursor: default; }
  .Button--transparent:hover, .Button--transparent:active, .Button--transparent:focus {
    color: #333; }

/**
 * Inline list of small buttons
 */
.Button--inlineList {
  display: inline-block;
  transform: translateZ(0);
  /* @include improveAntiAlias(); */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-osx-font-smoothing: grayscale;
  /* @include anticipatePainting(); */
  border-radius: 0;
  border-color: #999;
  border-left-width: 1px;
  border-right-width: 1px;
  border-top-width: 0;
  border-bottom-width: 0;
  padding: 0.8125rem 1.375rem 0.625rem;
  text-align: center; }
  .Button--inlineList:hover, .Button--inlineList:active, .Button--inlineList:focus {
    z-index: 0;
    border-color: #333;
    color: white; }
    .Button--inlineList:hover:nth-of-type(even), .Button--inlineList:active:nth-of-type(even), .Button--inlineList:focus:nth-of-type(even) {
      border-left-color: #333; }
  .Button--inlineList:nth-of-type(2) {
    border-left-color: transparent; }
  .Button--inlineList.is-grey {
    color: #999;
    border-right-color: #e6e6e6; }
    .Button--inlineList.is-grey:hover, .Button--inlineList.is-grey:active, .Button--inlineList.is-grey:focus {
      border-right-color: #e6e6e6; }
    .Button--inlineList.is-grey:last-of-type {
      border-right-color: transparent; }

/**
 * Button w/ background transition
 * From: http://ianlunn.github.io/Hover/
 *
 * 1. This code introduces the block-inline spacing
 *    problem. Not sure of the culprit.
 */
.Button--transSweep {
  display: inline-block;
  transform: translateZ(0);
  /* @include improveAntiAlias(); */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-osx-font-smoothing: grayscale;
  /* @include anticipatePainting(); */
  transition-property: color;
  transition-duration: 0.3s;
  -webkit-tap-highlight-color: transparent; }
  .Button--transSweep:before {
    background-color: #333;
    bottom: 0;
    content: "";
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    transform: scaleX(0);
    transform-origin: 0 50%;
    transition-property: transform;
    transition-duration: 0.3s;
    transition-timing-function: ease-out;
    z-index: -1; }
  .Button--transSweep:hover, .Button--transSweep:active, .Button--transSweep:focus {
    background-image: none;
    color: white; }
  .Button--transSweep:hover:before, .Button--transSweep:focus:before, .Button--transSweep:active:before {
    transform: scaleX(1); }
  .Button--transSweep .is-grey:before {
    background-color: #999999; }

.Button--transSweep + .Button--transSweep {
  margin-left: -1px;
  /* 1 */ }

/**
 * Button w/ border transition
 * From: http://ianlunn.github.io/Hover/
 */
.Button--transRule {
  display: inline-block;
  transform: translateZ(0);
  /* @include improveAntiAlias(); */
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  -moz-osx-font-smoothing: grayscale;
  /* @include anticipatePainting(); */
  border-radius: 0;
  padding-bottom: 0;
  position: relative;
  background-image: linear-gradient(to bottom, rgba(51, 51, 51, 0) 50%, rgba(51, 51, 51, 0.7) 50%);
  background-repeat: repeat-x;
  background-size: 2px 2px;
  background-position: 0 30px;
  color: #333;
  text-decoration: none;
  /* @media (max-width: 30em) { @content; } */ }
  .Button--transRule:before {
    background-color: rgba(51, 51, 51, 0.4);
    bottom: 1px;
    content: "";
    height: 1px;
    left: 0;
    position: absolute;
    right: 100%;
    transition-property: right;
    transition-duration: 0.3s;
    transition-timing-function: ease-out;
    z-index: -1;
    /* @media (max-width: 30em) { @content; } */ }
    @media (max-width: 29.9375em) {
      .Button--transRule:before {
        background-color: transparent; } }
  .Button--transRule:hover:before, .Button--transRule:focus:before, .Button--transRule:active:before, .Button--transRule.is-active:before {
    right: 0; }
  .Button--transRule:focus:before, .Button--transRule:active:before, .Button--transRule.is-active:before {
    background-color: #333; }
  @media (max-width: 29.9375em) {
    .Button--transRule {
      background-position: 0 24px; } }
  .Button--transRule:hover, .Button--transRule:active, .Button--transRule:focus {
    background-image: none;
    color: #333;
    text-decoration: none; }
  .Button--transRule.is-transRev:before {
    background-color: #333;
    left: 0;
    right: 0;
    transition-property: left; }
  .Button--transRule.is-transRev:hover:before, .Button--transRule.is-transRev:focus:before, .Button--transRule.is-transRev:active:before {
    left: 100%; }
  .Button--transRule.is-grey:before {
    background-color: rgba(153, 153, 153, 0.4); }
  .Button--transRule.is-inline {
    background-position: 0 21px;
    display: inline;
    padding-bottom: 1px; }
    .Button--transRule.is-inline:before {
      bottom: 0; }
  .Button--transRule.is-active.is-transRev:before {
    background-color: #333; }
  .Button--transRule.is-active {
    color: #333; }

/**
 * Button as data-toggle.
 */
.Modal-close,
[data-toggle],
[data-toggle-fold] {
  cursor: pointer; }

/* ==========================================================================

    MEDIA OBJECT
    https://github.com/csswizardry/inuit.css/blob/c737cf1694e9db4d597f8d081091b8529614e370/objects/_media.scss

   ========================================================================== */
/**
 * Place any image- and text-like content side-by-side, as per:
 * stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code
 * E.g.:
 *
   <div class=media>
       <img src=http://placekitten.com/200/300 alt="" class=media__img>
       <p class=media__body>Lorem ipsum dolor sit amet, consectetur adipisicing elit,
       sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/cf4Qs
 *
 */
.Media {
  display: block; }
  .Media:before, .Media:after {
    content: " ";
    display: table; }
  .Media:after {
    clear: both; }

.Media-img {
  float: left;
  margin-right: 0.65625rem; }

.Media-img--rev {
  float: right;
  margin-left: 0.65625rem; }

.Media-img img,
.Media-img--rev img {
  display: block; }

.Media-body {
  overflow: hidden; }

.Media-body,
.Media-body > :last-child {
  margin-bottom: 0; }

.islet .Media-img {
  margin-right: 0.65625rem; }

.islet .Media-img--rev {
  margin-left: 0.65625rem; }

/* ==================================================================

    LAYOUT

   ================================================================== */
/**
 * Body
 */
body {
  height: 100%;
  overflow-y: scroll;
  padding: 0; }

/**
 * HTML5 content blocks.
 */
/**
 * The content column container.
 */
.Container {
  margin: 0 auto;
  max-width: 60rem;
  padding: 0 1.96875rem;
  position: relative; }
  .Container:before, .Container:after {
    content: " ";
    display: table; }
  .Container:after {
    clear: both; }
  @media (min-width: 992px) {
    .Container {
      padding: 0; } }

.Container--projects {
  max-width: 100%; }
  @media (min-width: 992px) {
    .Container--projects {
      max-width: 64rem; } }

.Container--full {
  max-width: 100%; }

.Header {
  background-color: #F5F4F5;
  max-height: 36.25rem; }
  @media (min-width: 767px) {
    .Header {
      height: 43.75rem; } }

.Header-nav {
  margin: 1.96875rem 0;
  position: relative; }

.Header-logo {
  margin-bottom: 0; }
  .Header-logo a {
    background-image: none; }
  .Header-logo img {
    height: 2.25rem; }
    @media (min-width: 767px) {
      .Header-logo img {
        height: 2.5rem; } }

.Header-menu {
  position: absolute;
  top: 0.8125rem;
  right: 0;
  margin: 0; }
  .Header-menu li {
    font-style: normal;
    font-weight: normal;
    font-size: 21px;
    font-size: 1.3125rem;
    font-family: "FoundersGroteskCond-Med";
    color: #333;
    letter-spacing: 0.02em;
    line-height: 1.5;
    margin: 0 0 2.95312rem;
    color: white;
    display: inline-block;
    margin: 0; }
    .Header-menu li a {
      background-position: 0 21px !important; }
  .Header-menu li:not(:last-child) {
    margin-right: 0.59062rem; }
  .Header-menu li:last-child:before {
    content: "•";
    display: inline-block;
    margin-right: 0.59062rem; }
  .Header-menu li a {
    background-image: none;
    color: currentColor;
    text-decoration: none;
    display: inline-block;
    transform: translateZ(0);
    /* @include improveAntiAlias(); */
    -webkit-backface-visibility: hidden;
    backface-visibility: hidden;
    -moz-osx-font-smoothing: grayscale;
    /* @include anticipatePainting(); */
    display: inline-block;
    border-radius: 0;
    padding-bottom: 0;
    position: relative;
    color: white; }
    .Header-menu li a:hover, .Header-menu li a:active, .Header-menu li a:focus {
      background-image: none;
      color: #0071bc;
      text-decoration: none; }
    .Header-menu li a:before {
      background-color: white;
      bottom: 0;
      content: "";
      height: 0.0625rem;
      left: 0;
      position: absolute;
      right: 100%;
      transition-property: right;
      transition-duration: 0.15s;
      transition-timing-function: ease-out;
      z-index: -1; }
      @media (min-width: 767px) {
        .Header-menu li a:before {
          height: 0.0625rem; } }
    .Header-menu li a:hover, .Header-menu li a:active, .Header-menu li a:focus {
      color: white;
      padding-bottom: 0rem; }
    .Header-menu li a:hover:before, .Header-menu li a:focus:before, .Header-menu li a:active:before, .Header-menu li a.is-active:before {
      right: 0; }
    .Header-menu li a:focus:before, .Header-menu li a:active:before, .Header-menu li a.is-active:before {
      background-color: #333; }

.Header-directive {
  margin-top: 3.9375rem; }
  .Header-directive p {
    font-size: 22px;
    font-size: 1.375rem;
    color: white; }
    .Header-directive p span {
      font-size: 26px;
      font-size: 1.625rem;
      font-family: "FoundersGroteskCond-Bold";
      letter-spacing: 0.02em;
      line-height: 31.5px; }

.Footer {
  background-color: #F5F4F5; }

.Footer-nav {
  border-top: 1px solid rgba(153, 153, 153, 0.4);
  padding: 1.96875rem 0;
  position: relative; }

.Footer-logo {
  margin-bottom: 0; }
  .Footer-logo a {
    background-image: none; }
  .Footer-logo img {
    height: 2.25rem; }
    @media (min-width: 767px) {
      .Footer-logo img {
        height: 2.5rem; } }

.Footer-meta {
  margin-top: 1rem; }
  .Footer-meta li,
  .Footer-meta p,
  .Footer-meta a {
    background-image: none;
    color: currentColor;
    text-decoration: none;
    font-style: normal;
    font-weight: normal;
    font-size: 21px;
    font-size: 1.3125rem;
    font-family: "FoundersGroteskCond-Med";
    color: #333;
    letter-spacing: 0.02em;
    line-height: 1.5;
    margin: 0 0 2.95312rem;
    color: #999 !important;
    font-family: "FoundersGroteskCond-Reg";
    letter-spacing: 0.03em;
    line-height: 1.35;
    margin: 0; }
    .Footer-meta li:hover, .Footer-meta li:active, .Footer-meta li:focus,
    .Footer-meta p:hover,
    .Footer-meta p:active,
    .Footer-meta p:focus,
    .Footer-meta a:hover,
    .Footer-meta a:active,
    .Footer-meta a:focus {
      background-image: none;
      color: #0071bc;
      text-decoration: none; }
    .Footer-meta li a,
    .Footer-meta p a,
    .Footer-meta a a {
      background-position: 0 21px !important; }
  .Footer-meta li:not(:last-child) {
    margin-right: 0.59062rem; }

.Section {
  margin: 0 0 3.9375rem 0;
  padding-top: 5.90625rem; }
  @media (min-width: 600px) {
    .Section {
      margin-bottom: 5.90625rem; } }

.Section#who {
  background-color: #f2ebf2;
  border-bottom: 0.3125rem solid #333;
  border-top: 0.3125rem solid #333;
  margin-bottom: 0;
  padding: 4.92188rem 0;
  position: relative; }
  .Section#who > .Section-item {
    margin-bottom: 0; }
  .Section#who .Who-directive {
    position: absolute;
    bottom: -1.6875rem;
    text-align: center;
    width: 100%; }

.Section-item {
  position: relative; }
  .Section-item:not(:last-child) {
    margin-bottom: 3.9375rem; }
    @media (min-width: 600px) {
      .Section-item:not(:last-child) {
        margin-bottom: 5.90625rem; } }
  .Section-item:before {
    background-position: 50%;
    background-repeat: no-repeat;
    background-size: contain;
    content: " ";
    display: block;
    height: 7.5rem;
    left: -10rem;
    position: absolute;
    top: -0.65625rem;
    width: 10.4375rem; }
    @media (min-width: 600px) {
      .Section-item:before {
        height: 10.8125rem;
        left: -11.9375rem;
        width: 10.4375rem; } }

.Section-item--advice:before {
  background-image: url(/uploads/icon_advice.png); }

.Section-item--saving:before {
  background-image: url(/uploads/icon_saving.png); }

.Section-item--sustainable:before {
  background-image: url(/uploads/icon_sustainable.png); }

.Section-intro {
  font-family: "LyonText-Bold", Georgia, Times, serif; }
  .Section-intro span {
    font-family: "LyonText-BoldItalic", Georgia, Times, serif; }

.Section-directive {
  margin: 5.90625rem auto;
  position: relative;
  text-align: center; }
  .Section-directive:before {
    background-color: #333;
    content: "";
    display: block;
    height: 0.3125rem;
    position: absolute;
    top: calc(50% - 0.15625rem);
    width: 100%; }
  .Section-directive.Section-directive--light {
    margin: 3.9375rem 0 2.95312rem; }
    .Section-directive.Section-directive--light:before {
      height: 0.0625rem;
      top: calc(50% - 0.03125rem); }

.page-thanks {
  background-color: #F5F4F5; }

/* uncss:ignore */
.page-thanks .Header {
  height: auto;
  margin-bottom: 3.9375rem; }
  @media (min-width: 600px) {
    .page-thanks .Header {
      margin-bottom: 5.90625rem; } }

/* uncss:ignore */
.page-thanks .Header h1,
.page-thanks .Header p {
  color: #333; }

.page-thanks .Header-menu li a,
.page-thanks .Header-menu li:last-child:before,
.page-thanks .Header-menu li a:before {
  background-color: #999;
  border-color: #999;
  color: #999; }

/* ==========================================================================

    CONTACT BLOCK ELEMENT

   ========================================================================== */
.Contact {
  position: relative;
  display: block !important;
  overflow: hidden !important;
  width: auto !important; }

.Contact + .Contact {
  margin-top: 0.32812rem;
  padding-top: 3px; }

.Contact-details {
  font-style: normal;
  font-weight: normal;
  font-size: 21px;
  font-size: 1.3125rem;
  color: #333;
  font-family: "LyonText-Regular", Georgia, Times, serif;
  letter-spacing: 0;
  line-height: 1.5;
  text-align: left;
  text-transform: none;
  font-weight: 700;
  color: rgba(51, 51, 51, 0.5);
  line-height: 1.2;
  position: relative; }
  .Contact-details span {
    font-weight: 400;
    color: inherit;
    display: block;
    font-size: 14;
    margin: 2px 0 0; }
  .Header-byline .Contact-details {
    color: white; }

.CoverImage {
  background-position: 58% 50%;
  background-repeat: no-repeat;
  background-size: cover;
  display: block;
  height: 100%;
  margin: 0 auto;
  position: relative;
  width: 100%;
  content: none;
  background-image: none;
  color: currentColor;
  text-decoration: none; }
  .CoverImage:hover, .CoverImage:active, .CoverImage:focus {
    background-image: none;
    color: #0071bc;
    text-decoration: none; }
  @media (min-width: 767px) {
    .CoverImage {
      background-position: 50%; } }

.FlexEmbed-ratio--index {
  padding-bottom: 33.333333%; }

#contact {
  background-color: #F5F4F5;
  margin-top: 3.9375rem;
  padding-bottom: 5.90625rem; }
  @media (min-width: 600px) {
    #contact {
      margin-top: 5.90625rem; } }

.Form-grid {
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-flow: row wrap;
  -ms-flex-pack: distribute;
  justify-content: space-around; }

input,
textarea,
select {
  font-style: normal;
  font-weight: normal;
  font-size: 21px;
  font-size: 1.3125rem;
  color: #333;
  font-family: "LyonText-Regular", Georgia, Times, serif;
  letter-spacing: 0;
  line-height: 1.5;
  text-align: left;
  text-transform: none;
  font-size: 21px;
  font-size: 1.3125rem;
  background: white;
  border: 0;
  border: 1px solid rgba(51, 51, 51, 0.2);
  border-radius: 0.25rem;
  color: #737373;
  display: inline-block;
  padding: 0.9375rem 1.25rem;
  resize: none;
  -webkit-appearance: none;
  width: 100%; }
  input:not(:last-child),
  textarea:not(:last-child),
  select:not(:last-child) {
    margin: 0 0 0.98438rem; }
  input::-webkit-input-placeholder,
  textarea::-webkit-input-placeholder,
  select::-webkit-input-placeholder {
    color: rgba(51, 51, 51, 0.5); }
  input:-moz-placeholder,
  textarea:-moz-placeholder,
  select:-moz-placeholder {
    color: rgba(51, 51, 51, 0.5); }
  input::-moz-placeholder,
  textarea::-moz-placeholder,
  select::-moz-placeholder {
    color: rgba(51, 51, 51, 0.5); }
  input:-ms-input-placeholder,
  textarea:-ms-input-placeholder,
  select:-ms-input-placeholder {
    color: rgba(51, 51, 51, 0.5); }
  input:hover, input:active, input:focus,
  textarea:hover,
  textarea:active,
  textarea:focus,
  select:hover,
  select:active,
  select:focus {
    outline: 0; }

.Select-styled {
  font-size: 20px;
  font-size: 1.25rem;
  color: rgba(51, 51, 51, 0.5);
  margin: 0 0 0.98438rem;
  position: relative; }
  .Select-styled select {
    color: rgba(51, 51, 51, 0.5); }
  .Select-styled:after {
    border-top: .3em solid;
    border-left: .3em solid transparent;
    border-right: .3em solid transparent;
    content: "";
    display: block;
    height: 0;
    margin-left: .35rem;
    position: absolute;
    right: 0.98438rem;
    top: 50%;
    transform: translateY(-0.125rem);
    vertical-align: middle;
    width: 0; }

/* ==========================================================================

   MODAL COMPONENT

   ========================================================================== */
/**
 * Modal structure.
 */
.Modal {
  z-index: -1;
  background-color: rgba(51, 51, 51, 0.5);
  -webkit-backface-visibility: hidden;
  backface-visibility: hidden;
  margin: auto;
  opacity: 0;
  outline: 0;
  overflow: hidden;
  transition: z-index 0s ease 500ms, opacity 500ms ease;
  bottom: 0;
  left: 0;
  position: fixed;
  right: 0;
  top: 0; }

/* uncss:ignore */
.Modal.is-displayed {
  z-index: 8001;
  opacity: 1;
  overflow-x: hidden;
  overflow-y: auto;
  transition: z-index 0s ease, opacity 250ms ease; }

.Modal-dialog {
  margin: 0.98438rem;
  position: relative;
  width: auto;
  /* uncss:ignore */ }
  @media (min-width: 767px) {
    .Modal-dialog {
      margin: 2.95312rem auto;
      width: 600px; } }

.Modal-title {
  color: #D4BCD3;
  text-align: center; }

.Modal-content {
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid #999;
  border: 1px solid rgba(0, 0, 0, 0.2);
  border-radius: 6px;
  box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);
  outline: 0;
  padding: 1.96875rem;
  position: relative;
  transform: scale(0.9, 0.9);
  transition: transform 500ms cubic-bezier(0, -0.1, 1, -0.1);
  /* uncss:ignore */ }
  .Modal.is-displayed .Modal-content {
    transform: scale(1, 1);
    transition: transform 250ms cubic-bezier(0, 1.1, 1, 1.1); }
  @media (min-width: 767px) {
    .Modal-content {
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5); } }

/**
 * Modal close icon.
 * 1. Override Suit here cause it stuffs the appearance when clicked.
 */
[data-dismiss="modal"] {
  cursor: pointer; }

.Modal-close {
  font-size: 66px;
  font-size: 4.125rem;
  font-weight: 400;
  color: rgba(255, 255, 255, 0.7);
  cursor: pointer;
  height: 2.75rem;
  line-height: 0.25;
  position: absolute;
  right: -3.9375rem;
  top: 0.32812rem;
  width: 2.75rem; }
  .Modal-close label,
  .Modal-close .label {
    font-size: 12px;
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase; }

button:focus {
  outline: none; }

/* 1 */

/*# sourceMappingURL=data:application/json;base64, */
